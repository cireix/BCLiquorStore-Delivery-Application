{"ast":null,"code":"import decode from 'jwt-decode'; // store jowtoken locally\n\nconst setToken = token => {\n  localStorage.setItem('store_token_id', token);\n}; // Retrun the jwtoken from local storage\n\n\nconst getToken = () => localStorage.getItem('store_token_id'); // check if the token is expired\n\n\nconst isTokenExpired = token => {\n  try {\n    const _info = decode(token);\n\n    if (_info.exp < Date.now() / 1000) {\n      return true;\n    } else return false;\n  } catch (error) {\n    return false;\n  }\n}; // check login status\n\n\nconst isLogin = () => {\n  var status = false;\n  const jwt = getToken();\n\n  if (jwt != null) {\n    if (!isTokenExpired(jwt)) status = true;\n  }\n\n  ;\n  return status;\n}; // return a list of all users\n\n\nconst getUser = () => {\n  if (isLogin()) {\n    const jwt = getToken();\n    const user = decode(jwt);\n    return user;\n  } else {\n    return {};\n  }\n}; // remove the jwtoken stored locally\n\n\nconst logOut = () => {\n  localStorage.removeItem('store_token_id');\n};\n\nglobal.auth = {\n  setToken,\n  getUser,\n  logOut\n};","map":{"version":3,"sources":["C:/Users/Sean/nodeProject/新建文件夹/CMPT276/public/src/globalFunc/auth.js"],"names":["decode","setToken","token","localStorage","setItem","getToken","getItem","isTokenExpired","_info","exp","Date","now","error","isLogin","status","jwt","getUser","user","logOut","removeItem","global","auth"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACtBC,EAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,KAAvC;AACH,CAFD,C,CAIA;;;AACA,MAAMG,QAAQ,GAAG,MACbF,YAAY,CAACG,OAAb,CAAqB,gBAArB,CADJ,C,CAIA;;;AACA,MAAMC,cAAc,GAAGL,KAAK,IAAI;AAC5B,MAAI;AACA,UAAMM,KAAK,GAAGR,MAAM,CAACE,KAAD,CAApB;;AACA,QAAIM,KAAK,CAACC,GAAN,GAAYC,IAAI,CAACC,GAAL,KAAa,IAA7B,EAAmC;AAC/B,aAAO,IAAP;AACH,KAFD,MAEO,OAAO,KAAP;AACV,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CATD,C,CAWA;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAClB,MAAIC,MAAM,GAAG,KAAb;AACA,QAAMC,GAAG,GAAGV,QAAQ,EAApB;;AACA,MAAIU,GAAG,IAAI,IAAX,EAAiB;AACb,QAAI,CAACR,cAAc,CAACQ,GAAD,CAAnB,EAA0BD,MAAM,GAAG,IAAT;AAC7B;;AAAA;AACD,SAAOA,MAAP;AACH,CAPD,C,CASA;;;AACA,MAAME,OAAO,GAAG,MAAM;AAClB,MAAGH,OAAO,EAAV,EAAc;AACV,UAAME,GAAG,GAAGV,QAAQ,EAApB;AACA,UAAMY,IAAI,GAAGjB,MAAM,CAACe,GAAD,CAAnB;AACA,WAAOE,IAAP;AACH,GAJD,MAIO;AACH,WAAO,EAAP;AACH;AACJ,CARD,C,CAUA;;;AACA,MAAMC,MAAM,GAAG,MAAM;AACjBf,EAAAA,YAAY,CAACgB,UAAb,CAAwB,gBAAxB;AACH,CAFD;;AAIAC,MAAM,CAACC,IAAP,GAAc;AACVpB,EAAAA,QADU;AAEVe,EAAAA,OAFU;AAGVE,EAAAA;AAHU,CAAd","sourcesContent":["import decode from 'jwt-decode';\r\n\r\n// store jowtoken locally\r\nconst setToken = token => {\r\n    localStorage.setItem('store_token_id', token);\r\n}\r\n\r\n// Retrun the jwtoken from local storage\r\nconst getToken = () => (\r\n    localStorage.getItem('store_token_id')\r\n);\r\n\r\n// check if the token is expired\r\nconst isTokenExpired = token => {\r\n    try {\r\n        const _info = decode(token);\r\n        if (_info.exp < Date.now() / 1000) {\r\n            return true;\r\n        } else return false;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// check login status\r\nconst isLogin = () => {\r\n    var status = false;\r\n    const jwt = getToken();\r\n    if (jwt != null) {\r\n        if (!isTokenExpired(jwt)) status = true;\r\n    };\r\n    return status;\r\n}\r\n\r\n// return a list of all users\r\nconst getUser = () => {\r\n    if(isLogin()) {\r\n        const jwt = getToken();\r\n        const user = decode(jwt);\r\n        return user;\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\n// remove the jwtoken stored locally\r\nconst logOut = () => {\r\n    localStorage.removeItem('store_token_id');\r\n}\r\n\r\nglobal.auth = {\r\n    setToken,\r\n    getUser,\r\n    logOut\r\n}"]},"metadata":{},"sourceType":"module"}