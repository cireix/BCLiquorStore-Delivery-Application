{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/CMPT276/CMPT276/client/src/pages/Login.js\";\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'commons/axios';\nimport { toast } from 'react-toastify';\nimport decode from 'jwt-decode';\nexport default function Login(props) {\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const submitHnadler = async data => {\n    try {\n      //global.auth.logOut();\n      const {\n        phoneNumber,\n        password\n      } = data; // post to server side for login\n\n      const res = await axios.post('/api/users/login', {\n        phone: phoneNumber,\n        password: password\n      }); // receive a jwtoken from server side if success\n\n      const jwToken = res.data.token.replace('Bearer ', '');\n      console.log(decode(jwToken)); // store the token locally\n\n      global.auth.setToken(jwToken); // route to the home page\n\n      props.history.push('/');\n      toast.success(\"Login successful!\");\n    } catch (error) {\n      console.log(error);\n      toast.error('Invalid phone number or password');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login_wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    className: \"box login_box\",\n    onSubmit: handleSubmit(submitHnadler),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"field-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"field is-expanded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"field has-addons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    class: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    class: \"button is-static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 33\n    }\n  }, \"+1\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `input ${errors.phoneNumber && 'is-danger'}`,\n    placeholder: \"Phone number\",\n    name: \"phoneNumber\",\n    ref: register({\n      required: true,\n      pattern: {\n        value: /^\\(?([0-9]{3})\\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$/,\n        message: \"invalid phone number\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 33\n    }\n  })), errors.phoneNumber && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 53\n    }\n  }, errors.phoneNumber.message)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `input ${errors.password && 'is-danger'}`,\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: true,\n      minLength: {\n        value: 6,\n        message: \"cannot be less then 6 digits\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 46\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(Link, {\n    to: \"/forgotpw\",\n    className: \"has-text-danger forgotpw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, \"forgot password?\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button is-link login_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, \"Login\"))));\n}","map":{"version":3,"sources":["/home/eric/Desktop/CMPT276/CMPT276/client/src/pages/Login.js"],"names":["React","useForm","Link","axios","toast","decode","Login","props","register","handleSubmit","errors","submitHnadler","data","phoneNumber","password","res","post","phone","jwToken","token","replace","console","log","global","auth","setToken","history","push","success","error","required","pattern","value","message","minLength"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAGA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAuB;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAqCT,OAAO,EAAlD;;AAEA,QAAMU,aAAa,GAAG,MAAOC,IAAP,IAAgB;AAClC,QAAI;AACA;AACA,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA4BF,IAAlC,CAFA,CAGA;;AACA,YAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,kBAAX,EAA+B;AAAEC,QAAAA,KAAK,EAACJ,WAAR;AAAqBC,QAAAA,QAAQ,EAAEA;AAA/B,OAA/B,CAAlB,CAJA,CAKA;;AACA,YAAMI,OAAO,GAAGH,GAAG,CAACH,IAAJ,CAASO,KAAT,CAAeC,OAAf,CAAuB,SAAvB,EAAiC,EAAjC,CAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,CAACa,OAAD,CAAlB,EAPA,CAQA;;AACAK,MAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBP,OAArB,EATA,CAUA;;AACAX,MAAAA,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACAvB,MAAAA,KAAK,CAACwB,OAAN,CAAc,mBAAd;AACH,KAbD,CAaE,OAAOC,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACAzB,MAAAA,KAAK,CAACyB,KAAN,CAAY,kCAAZ;AACH;AACJ,GAlBD;;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,MAAM,EAAC,EAAb;AAAgB,IAAA,SAAS,EAAC,eAA1B;AAA0C,IAAA,QAAQ,EAAGpB,YAAY,CAACE,aAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,IAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,KAAK,EAAC,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAG,IAAA,KAAK,EAAC,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADJ,eAII;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,SAAS,EAAG,SAAQD,MAAM,CAACG,WAAP,IAAsB,WAAY,EAFtD;AAGA,IAAA,WAAW,EAAC,cAHZ;AAIA,IAAA,IAAI,EAAC,aAJL;AAKA,IAAA,GAAG,EAAEL,QAAQ,CAAC;AACVsB,MAAAA,QAAQ,EAAE,IADA;AAEVC,MAAAA,OAAO,EAAC;AACJC,QAAAA,KAAK,EAAE,oDADH;AAEJC,QAAAA,OAAO,EAAE;AAFL;AAFE,KAAD,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,EAiBMvB,MAAM,CAACG,WAAP,iBAAsB;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCH,MAAM,CAACG,WAAP,CAAmBoB,OAA3D,CAjB5B,CADJ,CAFJ,CADJ,eA0BI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACA,IAAA,IAAI,EAAC,MADL;AAEA,IAAA,SAAS,EAAG,SAAQvB,MAAM,CAACI,QAAP,IAAmB,WAAY,EAFnD;AAGA,IAAA,WAAW,EAAC,UAHZ;AAIA,IAAA,IAAI,EAAC,UAJL;AAKA,IAAA,GAAG,EAAEN,QAAQ,CAAC;AACVsB,MAAAA,QAAQ,EAAE,IADA;AAEVI,MAAAA,SAAS,EAAE;AACPF,QAAAA,KAAK,EAAE,CADA;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFD,KAAD,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAYMvB,MAAM,CAACI,QAAP,iBAAmB;AAAG,IAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCJ,MAAM,CAACI,QAAP,CAAgBmB,OAAxD,CAZzB,eAaI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,WAAT;AAAqB,IAAA,SAAS,EAAC,0BAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAbJ,CAFJ,CA1BJ,eA+CI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,SAAS,EAAC,6BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CA/CJ,CADJ,CADJ;AAwDH","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom'; \nimport axios from 'commons/axios';\nimport { toast } from 'react-toastify';\nimport decode from 'jwt-decode';\n\n\nexport default function Login(props)  {\n    const { register, handleSubmit, errors } = useForm();\n\n    const submitHnadler = async (data) => {\n        try {\n            //global.auth.logOut();\n            const { phoneNumber, password } = data;\n            // post to server side for login\n            const res = await axios.post('/api/users/login', { phone:phoneNumber, password: password });  \n            // receive a jwtoken from server side if success\n            const jwToken = res.data.token.replace('Bearer ','');\n            console.log(decode(jwToken));\n            // store the token locally\n            global.auth.setToken(jwToken);  \n            // route to the home page\n            props.history.push('/');  \n            toast.success(\"Login successful!\");\n        } catch (error) {\n            console.log(error);\n            toast.error('Invalid phone number or password');\n        }\n    };\n\n    return(\n        <div className=\"login_wrapper\">\n            <form action=\"\" className=\"box login_box\" onSubmit={ handleSubmit(submitHnadler) }>\n                <div className=\"field\">\n                    <label className=\"label\">Phone Number</label>             \n                    <div class=\"field-body\">\n                        <div class=\"field is-expanded\">\n                            <div class=\"field has-addons\">\n                                <p class=\"control\">\n                                <p class=\"button is-static\">+1</p>\n                                </p>\n                                <input \n                                type=\"text\" \n                                className={`input ${errors.phoneNumber && 'is-danger'}`}\n                                placeholder=\"Phone number\" \n                                name=\"phoneNumber\"\n                                ref={register({\n                                    required: true,\n                                    pattern:{\n                                        value: /^\\(?([0-9]{3})\\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$/,\n                                        message: \"invalid phone number\"\n                                }})} />  \n                            </div>\n                            { errors.phoneNumber && <p className=\"helper has-text-danger\">{ errors.phoneNumber.message }</p >}\n                        </div>\n                    </div>                        \n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Password</label>\n                    <div className=\"control\">\n                        <input \n                        type=\"text\" \n                        className={`input ${errors.password && 'is-danger'}`}\n                        placeholder=\"Password\" \n                        name=\"password\"\n                        ref={register({\n                            required: true,\n                            minLength: {\n                                value: 6,\n                                message: \"cannot be less then 6 digits\"\n                            }})}/>\n                        { errors.password && <p className=\"helper has-text-danger\">{ errors.password.message }</p >}\n                        <Link to='/forgotpw' className=\"has-text-danger forgotpw\">forgot password?</Link>\n                    </div>              \n                </div>\n                \n                   \n\n                <div className=\"control\">\n                    <button className=\"button is-link login_button\">Login</button>\n                </div>\n\n            </form>         \n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}