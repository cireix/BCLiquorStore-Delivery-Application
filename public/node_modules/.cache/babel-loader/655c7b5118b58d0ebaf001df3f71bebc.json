{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/CMPT276/CMPT276/server/public/src/pages/ResetPw.js\";\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'commons/axios';\nimport { toast } from 'react-toastify';\nexport default function ResetPw(props) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n\n  const submitHandler = async data => {\n    try {\n      const {\n        veri_code,\n        password\n      } = data; // post verfication code and new password to server side\n\n      const res = await axios.post('/auth/resetpw', {\n        veri_code,\n        password\n      }); // receive a jwtoken from server side if successful\n\n      const jwToken = res.data; // store the token locally\n\n      global.auth.setToken(jwToken); // route to the home page\n\n      props.history.push('/');\n      toast.success(\"Reset password successfully!\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login_wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    className: \"box login_box\",\n    onSubmit: handleSubmit(submitHandler),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"Verification Code\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `input ${errors.veri_code && 'is-danger'}`,\n    placeholder: \"Verification Code\",\n    name: \"veri_code\",\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  }), errors.veri_code && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 51\n    }\n  }, \"verification code is required\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: `input ${errors.password && 'is-danger'}`,\n    type: \"text\",\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: true,\n      minLength: {\n        value: 6,\n        message: 'cannot be less than 6 digits'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 46\n    }\n  }, errors.password.message))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: `input ${errors.password2 && 'is-danger'}`,\n    type: \"text\",\n    placeholder: \"Confirm Password\",\n    name: \"password2\",\n    ref: register({\n      required: true,\n      validate: value => value === watch('password')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }), errors.password2 && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 47\n    }\n  }, \"must match the qrevious entry\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button is-link login_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["/home/eric/Desktop/CMPT276/CMPT276/server/public/src/pages/ResetPw.js"],"names":["React","useForm","axios","toast","ResetPw","props","register","handleSubmit","errors","watch","submitHandler","data","veri_code","password","res","post","jwToken","global","auth","setToken","history","push","success","error","console","log","required","minLength","value","message","password2","validate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'commons/axios';\nimport { toast } from 'react-toastify';\n\nexport default function ResetPw(props) {\n    const { register, handleSubmit, errors, watch } = useForm();\n\n    const submitHandler = async (data) => {\n        try {\n            const { veri_code, password } = data;\n            // post verfication code and new password to server side\n            const res = await axios.post('/auth/resetpw', { veri_code, password });\n            // receive a jwtoken from server side if successful\n            const jwToken = res.data;\n            // store the token locally\n            global.auth.setToken(jwToken);\n            // route to the home page\n            props.history.push('/');\n            toast.success(\"Reset password successfully!\")\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n        <div className=\"login_wrapper\">\n            <form action=\"\" className=\"box login_box\" onSubmit={ handleSubmit(submitHandler) }>\n                <div className=\"field\">\n                    <label className=\"label\">Verification Code</label>\n                    <div className=\"control\">  \n                        <input \n                        type=\"text\" \n                        className={`input ${errors.veri_code && 'is-danger'}`}\n                        placeholder=\"Verification Code\" \n                        name=\"veri_code\"\n                        ref={register({\n                            required: true,\n                            })} />\n                            { errors.veri_code && <p className=\"helper has-text-danger\">verification code is required</p >}\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">New Password</label>\n                    <div className=\"control\">\n                        <input \n                        className={`input ${errors.password && 'is-danger'}`}\n                        type=\"text\" \n                        placeholder=\"Password\" \n                        name='password'     \n                        ref={ register({ \n                            required: true,\n                            minLength: {\n                                value: 6,\n                                message: 'cannot be less than 6 digits'\n                            }}) } />\n                        { errors.password && <p className=\"helper has-text-danger\">{ errors.password.message }</p> } \n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label\">Confirm Password</label>\n                    <div className=\"control\">\n                        <input \n                        className={`input ${errors.password2 && 'is-danger'}`}  \n                        type=\"text\" \n                        placeholder=\"Confirm Password\" \n                        name='password2'     \n                        ref={ register({       \n                            required: true,\n                            validate: (value) => value === watch('password')\n                            }) }  />   \n                        { errors.password2 && <p className=\"helper has-text-danger\">must match the qrevious entry</p> }  \n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button className=\"button is-link login_button\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}